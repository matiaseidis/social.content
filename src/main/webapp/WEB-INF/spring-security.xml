<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:security="http://www.springframework.org/schema/security"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util"
	xmlns:lang="http://www.springframework.org/schema/lang"
	xsi:schemaLocation="http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang-3.1.xsd 
	http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.1.xsd">
	
	<security:global-method-security secured-annotations="enabled" pre-post-annotations="enabled">
	</security:global-method-security>
	
	
	<!-- 
	 @PreAuthorize("hasRole('ROLE_USER')")
	  @PostFilter("hasPermission(filterObject, 'read') or hasPermission(filterObject, 'admin')")
  public void create(Contact contact);
   -->
  
	<security:http 
	auto-config="true" 
	use-expressions="true" 
	create-session="ifRequired" 
	path-type="ant" 
	access-denied-page="/WEB-INF/views/login_stand_alone_denied.jsp"
	disable-url-rewriting="true">
		<security:intercept-url pattern="/admin/*" access="hasRole('ROLE_ADMIN')" />
		<security:intercept-url pattern="/" access="permitAll" 	/>
		<security:intercept-url pattern="/**/show/*" access="permitAll" />
		<security:intercept-url pattern="/profile/*" access="permitAll" />
		
		<security:intercept-url pattern="/login" access="permitAll" />
		<security:intercept-url pattern="/register" access="permitAll" />
		
<!-- 		<security:intercept-url pattern="/ajax/search/*" access="permitAll" /> -->
		<security:intercept-url pattern="/ajax/search/**/*" access="permitAll" />
		<security:intercept-url pattern="/ajax/search*" access="permitAll" />
		
		<security:intercept-url pattern="/*" access='hasRole("ROLE_USER")' />
		
		
<!-- 		<security:intercept-url pattern="/resources/**/*" access="permitAll" /> -->
		<security:intercept-url pattern="/js/**/*.js" access="permitAll" />
		<security:intercept-url pattern="/img/**/*" access="permitAll" />
		<security:intercept-url pattern="/**/*.css" access="permitAll" />
		<security:intercept-url pattern="/fonts/**/*" access="permitAll" />
		<security:intercept-url pattern="/js/**/*.swf" access="permitAll" />
		
		<security:intercept-url pattern="/login_stand_alone.jsp" access="permitAll" />
		<security:intercept-url pattern="/**" access='hasRole("ROLE_USER")' />
<!-- 		authentication-success-handler-ref="authentication-success-handler" -->
<!-- always-use-default-target="true" -->
		<security:form-login login-page="/login" authentication-failure-url="/login" always-use-default-target="true"/>
		<security:logout logout-success-url="/" invalidate-session="true" />
	</security:http>

	<security:authentication-manager>
<!-- 		<security:authentication-provider  -->
<!-- 			ref="authenticationProvider" /> -->
		<security:authentication-provider 
			user-service-ref="user.details.service" />
<!--            <security:password-encoder ref="passwordEncoder"/> -->
	</security:authentication-manager>
	
<!-- 	coder since the user's passwords are stored as Md5 in the database  -->
<!--  <bean class="org.springframework.security.authentication.encoding.Md5PasswordEncoder" id="passwordEncoder"/> -->

	<bean id="authenticationProvider" class="com.mati.demo.authentication.AuthenticationProviderImpl">
		<property name="userDetailsService" ref="user.details.service" />
	</bean>

<bean id="authentication-success-handler" class="com.mati.demo.authentication.AuthenticationSuccessHandler"></bean>
 
<!--  	<lang:groovy id="user.details.service"  -->
<!--  	script-source="classpath:com/mati/demo/authentication/UserDetailsServiceImpl.groovy" -->
<!--  	></lang:groovy> -->
 
	<bean id="user.details.service" class="com.mati.demo.authentication.UserDetailsServiceImpl">
		<property name="baseModel" ref="base.model"></property>
	</bean>

</beans>